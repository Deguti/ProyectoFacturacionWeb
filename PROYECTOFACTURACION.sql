CREATE DATABASE PROYECTOFACTURACION;
GO
USE PROYECTOFACTURACION;
GO

CREATE TABLE CLIENTES(
	ID_CLIENTE int identity primary key,
	NOMBRE varchar(15) not null,
	APELLIDO1 varchar(15) not null,
	APELLIDO2 varchar(15) NOT NULL,
	DIRECCION varchar(200) NOT NULL,
	TELEFONO varchar(11) NOT NULL,
	CLIENTE_ELIMINADO bit
);
CREATE TABLE PRODUCTOS(
	ID_PRODUCTO INT IDENTITY PRIMARY KEY,
	DESCRIPCION VARCHAR(20) NOT NULL,
	PRECIO DECIMAL NOT NULL,
	EXISTENCIA DECIMAL NOT NULL,
	PRODUCTO_ELIMINADO BIT
);

CREATE TABLE FACTURAS(
	NUM_FACTURA INT IDENTITY PRIMARY KEY,
	ID_CLIENTE INT FOREIGN KEY REFERENCES CLIENTES(ID_CLIENTE),
	FECHA DATE DEFAULT GETDATE() NOT NULL,
	ESTADO varchar(20) DEFAULT 'PENDIENTE' NOT NULL
);
CREATE TABLE DETALLEFACTURA(
	NUM_FACTURA INT FOREIGN KEY REFERENCES FACTURAS(NUM_FACTURA),
	ID_PRODUCTO INT FOREIGN KEY REFERENCES PRODUCTOS(ID_PRODUCTO),
	CANTIDAD INT DEFAULT 1 NOT NULL,
	PRECIO_VENTA DECIMAL NOT NULL,
);

CREATE TABLE HISTORIALFINANCIERO(
	ID_HISTORIALFINANCIERO INT IDENTITY PRIMARY KEY,
	NUM_FACTURA INT FOREIGN KEY REFERENCES FACTURAS(NUM_FACTURA),
	FECHA_PAGO DATE DEFAULT GETDATE() NOT NULL,
	MONTO_PAGO DECIMAL NOT NULL,
	FACTURA_PAGADA CHAR CHECK(FACTURA_PAGADA IN('S','N')) NOT NULL,
	MONTOTOTALDEUDA DECIMAL NOT NULL,
	PAGO_ELIMINADO BIT
);

SELECT * FROM DETALLEFACTURA
SELECT F.NUM_FACTURA,ID_PRODUCTO,PRECIO_VENTA,FECHA,ESTADO  FROM DETALLEFACTURA DF
INNER JOIN FACTURAS F  
ON F.NUM_FACTURA=2
CREATE TABLE EMPLEADOS(
	ID_EMPLEADO INT IDENTITY PRIMARY KEY,
	NOMBRE VARCHAR(15) NOT NULL,
	APELLIDO1 VARCHAR(15) NOT NULL,
	APELLIDO2 VARCHAR(15) NOT NULL,
	CARGO VARCHAR(20) CHECK (CARGO IN('ADMINISTRADOR','EMPLEADO','CLIENTE')) NOT NULL,
	EMPLEADO_ELIMINADO BIT
);

CREATE TABLE NOTIFICACIONES(
	ID_NOTIFICACION INT IDENTITY PRIMARY KEY,
	ID_EMPLEADO INT FOREIGN KEY REFERENCES EMPLEADOS(ID_EMPLEADO),
	ID_HISTORIALFINANCIERO INT FOREIGN KEY REFERENCES HISTORIALFINANCIERO(ID_HISTORIALFINANCIERO),
	MENSAJE VARCHAR(200) DEFAULT 'CLIENTE EN ATRASO' NOT NULL,
	FECHA_ENVIO DATE DEFAULT GETDATE(),
	DESTINATARIO VARCHAR(15) NOT NULL,
	NOTIFICACION_ELIMINADA BIT
);

CREATE TABLE HISTORIALCLIENTE(
	ID_HISTORIAL INT IDENTITY PRIMARY KEY NOT NULL,
	ID_CLIENTE INT FOREIGN KEY REFERENCES CLIENTES(ID_CLIENTE),
	NUM_FACTURA INT FOREIGN KEY REFERENCES FACTURAS(NUM_FACTURA) NOT NULL,
	FECHA DATE DEFAULT GETDATE()NOT NULL,
	HISTORIAL_ELIMINADO BIT
);

CREATE TABLE HISTORIALVENTAS(
	ID_HISTORIALVENTAS INT IDENTITY PRIMARY KEY,
	NUM_FACTURA INT FOREIGN KEY REFERENCES FACTURAS(NUM_FACTURA),
	MONTOTOTALFACTURA DECIMAL NOT NULL,
	FECHAFACTURAS DATE NOT NULL,
	HISTORIALVENTASELIMINADO BIT 
);

/****** StoredProcedure GUARDAR_DETALLE ******/
GO
CREATE OR ALTER PROCEDURE [dbo].[GUARDAR_DETALLE](@NUMFACTURA INT OUT,
								 @IDPRODUCTO INT,
								 @CANTIDAD INT,
								 @PRECIOV INT,
								 @MSJ VARCHAR(200) OUT)
	AS BEGIN
		DECLARE @CANT INT
		DECLARE @EXT INT
		DECLARE @DESCRIPCION VARCHAR(200)
		SET @EXT = (SELECT EXISTENCIA FROM PRODUCTOS WHERE ID_PRODUCTO=@IDPRODUCTO)

		IF NOT EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_FACTURA = @NUMFACTURA) 
			BEGIN
				SET @MSJ='NO SE PUEDE AGREGAR EL DETALLE YA QUE LA FACTURA NO EXISTE'
			END
		ELSE
			BEGIN
				IF EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_FACTURA = @NUMFACTURA AND ESTADO='PENDIENTE') 
					BEGIN
						IF (@EXT < @CANTIDAD )
							BEGIN
								SET @MSJ='CANTIDAD INSUFICIENTE'
							END
						ELSE
							BEGIN 
							IF NOT EXISTS(SELECT 1 FROM DETALLEFACTURA WHERE NUM_FACTURA=@NUMFACTURA AND ID_PRODUCTO=@IDPRODUCTO) 
								IF @CANTIDAD <= 0
									SET @MSJ='LA CANTIDAD DE PRODUCTOS DEBE SER MAYOR A 0'
								ELSE
									BEGIN
										INSERT INTO DETALLEFACTURA(NUM_FACTURA,ID_PRODUCTO,CANTIDAD,PRECIO_VENTA) 
										VALUES (@NUMFACTURA,@IDPRODUCTO,@CANTIDAD,@PRECIOV) 
										SET @MSJ='DETALLE DE FACTURA INGRESADO'
									END
							ELSE
								BEGIN
									SET @CANT = (SELECT CANTIDAD FROM DETALLEFACTURA WHERE NUM_FACTURA = @NUMFACTURA AND ID_PRODUCTO=@IDPRODUCTO)
									IF ((@CANT + @CANTIDAD) <= 0)
										BEGIN
											DELETE DETALLEFACTURA WHERE NUM_FACTURA = @NUMFACTURA AND ID_PRODUCTO=@IDPRODUCTO
											IF ((SELECT COUNT(ID_PRODUCTO) FROM DETALLEFACTURA WHERE NUM_FACTURA=@NUMFACTURA)=0)
												BEGIN
													DELETE FACTURAS WHERE NUM_FACTURA=@NUMFACTURA SET 
													@MSJ='SE ELIMINO DETALLE Y LA FACTURA'
												END
										END											
									ELSE
										IF ((@CANTIDAD) < 0)
											BEGIN
												SET @DESCRIPCION = (SELECT DESCRIPCION FROM PRODUCTOS WHERE ID_PRODUCTO = @IDPRODUCTO)
												SET @MSJ='SE DEVOLVIERON '+ CAST(@CANT AS varchar) + ' PRODUCTOS DE ' + CAST(@DESCRIPCION AS varchar)
												UPDATE DETALLEFACTURA SET CANTIDAD=@CANTIDAD + @CANT WHERE NUM_FACTURA = @NUMFACTURA AND ID_PRODUCTO=@IDPRODUCTO
											END
										ELSE
											BEGIN
												UPDATE DETALLEFACTURA SET CANTIDAD= @CANTIDAD + @CANT WHERE NUM_FACTURA = @NUMFACTURA AND ID_PRODUCTO=@IDPRODUCTO
												SET @DESCRIPCION = (SELECT DESCRIPCION FROM PRODUCTOS WHERE ID_PRODUCTO = @IDPRODUCTO)
												SET @MSJ= 'SE AGREGARON '+ CAST(@CANTIDAD AS varchar) + ' PRODUCTOS DE ' + CAST(@DESCRIPCION AS varchar)
										END
								END--
						END -- CANTIDAD SUFICIENTE
					END --ESTADO='PENDIENTE'
				ELSE 
					SET @MSJ='NO SE PUEDE MODIFICAR LA FACTURA YA QUE NO ESTA PENDIENTE'
			END
	END

GO
select *from FACTURAS
select * from DETALLEFACTURA
/****** StoredProcedure GUARDAR_FACTURA ******/
GO
CREATE OR ALTER PROCEDURE [dbo].[GUARDAR_FACTURA](@NUMFACTURA INT OUT,
								 @IDCLIENTE INT,
								 @FECHA DATE,
								 @ESTADO VARCHAR(15),
								 @MSJ VARCHAR(200) OUT)
	AS BEGIN
		IF NOT EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_FACTURA=@NUMFACTURA) 
			BEGIN
				INSERT INTO FACTURAS(ID_CLIENTE,FECHA,ESTADO) 
				VALUES (@IDCLIENTE,@FECHA,@ESTADO)
				SET @MSJ='FACTURA INGRESADA'
				SET @NUMFACTURA=SCOPE_IDENTITY()
			END
		ELSE
			BEGIN
				IF EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_FACTURA=@NUMFACTURA AND ESTADO='PENDIENTE') 
					BEGIN
						UPDATE FACTURAS SET ID_CLIENTE=@IDCLIENTE, 
						FECHA=@FECHA WHERE NUM_FACTURA=@NUMFACTURA
						SET @MSJ='FACTURA MODIFICADA'
					END
				ELSE
					SET @MSJ='NO SE PUEDE MODIFICAR LA FACTURA YA QUE NO ESTA PENDIENTE'
			END
	END

GO

-- STORE PROCEDURE ELIMINAR DETALLE--
CREATE OR ALTER PROCEDURE [dbo].[ELIMINAR_DETALLE] (@NUMFACTURA INT, @IDPRODUCTO INT, @MSJ VARCHAR(200) OUT)
	AS BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_FACTURA=@NUMFACTURA) 
				SET @MSJ='LA FACTURA NO EXISTE'
			ELSE
				BEGIN
					IF EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_FACTURA=@NUMFACTURA AND ESTADO='PENDIENTE') 
						BEGIN
							BEGIN TRAN
								DELETE DETALLEFACTURA WHERE NUM_FACTURA=@NUMFACTURA AND ID_PRODUCTO=@IDPRODUCTO
								IF ((SELECT COUNT(ID_PRODUCTO) FROM DETALLEFACTURA WHERE NUM_FACTURA=@NUMFACTURA)=0)
									BEGIN
										DELETE FACTURAS WHERE NUM_FACTURA=@NUMFACTURA
										SET @MSJ='EL DETALLE Y LA FACTURA FUERON ELIMINADOS'
									END
								ELSE
									SET @MSJ='DETALLE ELIMINAD0'
							COMMIT
						END
					ELSE
						SET @MSJ='LA FACTURA NO SE PUEDE MODIFICAR YA QUE SE ENCUENTRA CANCELADA O ANULADA'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
			ROLLBACK TRAN
		END CATCH
	END
GO


-- Variables de entrada
DECLARE @NUMFACTURA INT
DECLARE @IDPRODUCTO INT
DECLARE @CANTIDAD INT
DECLARE @PRECIOV INT
DECLARE @MSJ VARCHAR(200)

-- Asigna valores a las variables de entrada
SET @NUMFACTURA = 2 -- Reemplaza con el número de factura deseado
SET @IDPRODUCTO = 1 -- Reemplaza con el ID del producto deseado
SET @CANTIDAD = 5 -- Reemplaza con la cantidad deseada
SET @PRECIOV = 1000 -- Reemplaza con el precio de venta deseado

-- Ejecuta el procedimiento almacenado GUARDAR_DETALLE
EXEC [dbo].[GUARDAR_DETALLE] @NUMFACTURA OUTPUT, @IDPRODUCTO, @CANTIDAD, @PRECIOV, @MSJ OUTPUT

-- Muestra el resultado
SELECT @NUMFACTURA AS 'NUMFACTURA', @MSJ AS 'MSJ'
go
select* from FACTURAS